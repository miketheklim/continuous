workflows:
  version: 2
  build-deploy:
    jobs:
      - unit-test
      - publish-docker:
          requires:
            - unit-test
          filters:
            branches:
              only: master
      - deploy-on-kubernetes:
          requires:
            - publish-docker

version: 2
jobs:
  unit-test:
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - continuous-{{ checksum "pom.xml" }}
            - continuous
      - run: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: continuous-{{ checksum "pom.xml" }}
      - run:
          name: Build and unit test
          command: |
            mvn test

  publish-docker:
    docker:
      - image: circleci/openjdk:11-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - continuous-{{ checksum "pom.xml" }}
            - continuous
      - run:
          name: Login to docker repo
          command: docker login -u _json_key -p "$GCLOUD_SERVICE_KEY" https://gcr.io
      - run:
          name: Build image
          command: |
            mvn compile jib:build -Dbuild.number=${CIRCLE_BUILD_NUM} \
              -Dcommit.hash=${CIRCLE_SHA1} \
              -Dcircle.workflow.guid=${CIRCLE_WORKFLOW_ID} \
              -Dbuild.user=${CIRCLE_PROJECT_USERNAME} \
              -Dbuild.repo=${CIRCLE_PROJECT_REPONAME}

  deploy-on-kubernetes:
    docker:
      - image: google/cloud-sdk   # official google SDK image - include gcloud kubectl etc.
    environment:
      - PROJECT_NAME: "continuous"
      - GOOGLE_PROJECT_ID: "fiery-iridium-235312"
      - GOOGLE_COMPUTE_ZONE: "us-central1-a"
      - GOOGLE_CLUSTER_NAME: "badbibi"
    steps:
      - checkout
      - run:
          name: Setup Google Cloud SDK   #gettext to narzÄ™dzie zaw. m.in envsubst dzieki niemu mozemy w locie tworzyc zmienne i przypisywac im wartosci
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}

      - run:
          name: echo some variables
          command: |
            echo circle build num is $(( ${CIRCLE_BUILD_NUM}-1 ))
      - run:
          name: Deploy to Kubernetes
          command: |
            kubectl --record deployment.apps/${PROJECT_NAME} set image deployments/${PROJECT_NAME} ${PROJECT_NAME}=gcr.io/fiery-iridium-235312/test/${PROJECT_NAME}:$(( ${CIRCLE_BUILD_NUM}-1 ))
            timeout 120 kubectl rollout status deployment.v1.apps/${PROJECT_NAME} || kubectl rollout undo deployment.v1.apps/${PROJECT_NAME} | exit 1






#            envsubst < ${HOME}/project/k8s.yml > ${HOME}/patched_k8s.yml
#            kubectl apply -f ${HOME}/patched_k8s.yml
#            kubectl rollout status deployment/${PROJECT_NAME}





#            envsubst < ${HOME}/project/k8s.yml > ${HOME}/patched_k8s.yml
#            kubectl apply -f ${HOME}/patched_k8s.yml



#  kubectl --record deployment.apps/continuous set image deployments/continuous-deployment continuous=gcr.io/fiery-iridium-235312/test/continuous:$(( ${CIRCLE_BUILD_NUM}-1 ))
#  timeout 120 kubectl rollout status deployment.v1.apps/continuous || kubectl rollout undo deployment.v1.apps/continuous | exit 1
#            kubectl set image deployments/continuous-deployment continuous=gcr.io/fiery-iridium-235312/test/continuous:$(( ${CIRCLE_BUILD_NUM}-1 ))


#            kubectl apply -f ${HOME}/patched_k8s.yml
#            timeout 240 kubectl rollout status deployment/continuous-deplo || kubectl rollout undo deployment/continuous | exit 1



